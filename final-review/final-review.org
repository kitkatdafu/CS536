#+TITLE: CS536 Final Exam Review
#+AUTHOR: Reid Chen
#+DATE:<2021-12-09 Thu> 
#+tags[]: Compiler
#+categories[]: CS PL

* Topics on the Final Exam
** Semantic Analysis
- Name analysis / symbol table
- static scope vs. dynamic scope
- variable overloading
- type checking
  - What are types? $\mathbb{Z} = \text{set of all integers}$
  - type system
    - primitive types
    - compound types
    - typing rules
  - type errors
  - static typing
    - checked by compiler
    - check at compiler type
  - dynamic typing
    - check at runtime
  - strong vs. weak typing
    - the degree to which a language catch a type error at compile/run time
** Runtime Environment
- How the memory is laid out
  - the stack 
    - store temporary things
    - activation records (AR)
  - the heap
    - store data dynamically allocated data
  - caller-callee relationship
    - parameter passing
      - pass by value
	- make a copy of the value
      - pass by reference
	- pass the address
      - pass by value-result
** Code Generation	  
- Intermediate Representation (IR, pseudo assembly code)
- Compiler Backend
- MIPS
- Code generation in MIPS
  - AST $\rightarrow$ MIPS
  - =if=, =while=, function calls, returns, etc
- Control-flow graph (CFG)
  - Flowchart representation of the code
  - Each node is a basic block
    - If you execute the beginning of a basic block, then you execute the end of the basic block.
    - Thus, can perform optimization in a basic block
** Optimization
- Difficulty
- Peephole optimization
  - Canonical optimization
    1. =mult by 2= $\rightarrow$ =shift by 1=
- Loop invariant code motion (LICM)
- Constant propagation
- Dead-code elimination
** Data-flow Analysis
- Live variable analysis
- Reachable definition
- Static Single Assignment (SSA)
* Semantic Analysis
A parser can check if a program is syntactically correct, i.e it looks good. But, it can not
determine if a program is semantically correct, i.e. it is meaningful. A semantic analyzer is able
to check the
The parser can only make sure that a program looks good. But, it cannot make sure a program is meaningful. It is the semantic analyzer's task to check if a program is semantically correct. A semantic analyzer consists of two parts. The first part is called name analyzer. And the second part is called type checker. Type checker should only be invoked after the name analyzer since it dependes on the information (Symbol Table) built during the pass of name analyzer. Together, the following errors can be caught by the semantic analzyer
1. A variable is declared more than once in the same scope
2. A variable is used before its declaration
3. A variable of type =a= is assigned with a value of type =b=
4. A function is called, by with incorrect number of actual parameters
** Symbol Table
A symbol table contains symbol entries. Each entry stores a map from a name to the attributes of the name:
1. kind (variable, function, struct,...)
2. type (int, string, void, ...)
The design of the symbol is based on the scoping rule. A scoping rule tells the compiler when a name can be reused. What value should a name associate to in a nested scope. There are two types of scoping rules. The first one is called static scoping. The second one is called dynamic scoping.
*** Static Scoping
The correspondence between uses and declarations is made at compile time.
*** Dynamic Scoping

* Code Generation
[fn:1]
** =Spim=
   Special Registers in Spim
   | Register    | Purpose                                                 |
   |-------------+---------------------------------------------------------|
   | =$sp=       | stack pointer                                           |
   | =$fp=       | frame pointer                                           |
   | =$ra=       | return address                                          |
   | =$v0=       | used for system calls, return =int= from function calls |
   | =$f0=       | used for return =double= from function calls            |
   | =$a0=       | used for output of =int= and =string=                   |
   | =$f12=      | used for output of =double=                             |
   | =$t0 - $t7= | registers for =int=                         |
   | =$f0 - $f30= | registers for =double=                      |
** Code Generation for Global Variable Declarations 
   Let =N= denote the size of the global variable in bytes. For each global variable =_v=, we
   generate the following code snippet:
   #+begin_src MIPS
       .data     # in static data area
       .align 2  # align on a word boundary
   _v: .space N  # label N bytes area with name _v
   #+end_src
** Code Generation for Functions
   Need to generate the following 4 parts in order:
   1. preamble
   2. entry
   3. body
   4. exit
*** Generating Function Preamble
    For the =main= function,
    #+begin_src MIPS
        .text
        .globl main
    main:
    #+end_src
    For all other functions,
    #+begin_src MIPS
        .text
        _<functionName>:
    #+end_src
    where =<functionName>= is a placeholder for the function called =functinoName=.
    The =.text= indicates the assembler that the instructions below should be stored in the text area.
*** Generating Function Entry
    We do not need to worry about the actual parameters because the caller of this function has
    already pushed them on the stack.
    We need to do the following 4 things in order:
    1. push the return address
       #+begin_src MIPS
      sw   $ra, 0($sp)
      subu $sp, $sp, 4
       #+end_src
    2. push the control link
       #+begin_src MIPS
      sw   $fp, 0($sp)
      subu $sp, $sp, 4
       #+end_src
    3. set the =$fp=
       #+begin_src  MIPS
      addu $fp, $sp, 8
       #+end_src
    4. push space for local variables
       #+begin_src MIPS
      subu $sp, $sp, <size of locals in bytes>
       #+end_src
      where =size of locals in bytes= can be calculated during semantic analysis.
*** Generating Function Body
    No need to generate code for declarations, but need to generate code for each statement.
**** Write Statement
     1. Call the =codeGen= of the expressions in the write statement so that the value to be written
        will be placed on the top of the stack.
	#+begin_src Java
       myExp.codeGen();
	#+end_src
     2. Generate code that pop the value one the top of the stack into =$a0=
	#+begin_src Java
       genPop(a0, 4);
	#+end_src
     3. Set =$v0= to 1
	#+begin_src Java
       generate("li", v0, 1);
	#+end_src
     4. Make a system call
	#+begin_src Java
       generate("syscall");
	#+end_src
**** If-Then Statement        
     1. Evaluate the condition
     2. Pop the top-of-stack value into register =$t0=
     3. Jump to =FalseLabel= if =$t0= is =FALSE=
     4. Code for the statement list
     5. =FalseLabel:=
**** If-Then-Else Statement
     1. Evaluate the condition
     2. Pop the top-of-stack value into register =$t0=
     3. Jump to =FalseLabel= if =$t0= is =FALSE=
     4. Code for the then-statement list
     5. Jump to =Exit=
     6. =FalseLabel:=
     7. =Exit:=
**** While Statement
     1. =Start:=
     2. Evaluate the condition
     3. Pop the top-of-stack value into register =$t0=
     4. Jump to =FalseLabel= if =$0= is =FALSE=
     5. Code for the statement list
     6. =Start=
     7. =FalseLabel:=
**** Return Statement
**** Read Statement
**** Identifier
*** Generating Function Exit
    Want to pop off this function's AR. Then jump to the address that stored in the return address
    field of this function's AR. Popping off this function's AR means to restore the =$sp= and =$fp=
    to its caller' values. However, instead of simply setting =$sp= to =$fp=, we want to store =$fp=
    to a temporary register. Then restore =$fp= using the value stored in the control link
    field. Lastly, we restore =$sp= using the value stored in that temporary register. We restore
    =$sp= because a system interrupt may happen and use the stack. If we restore =$sp= at the
    beginning, the system interrupt may overwrite data we need.
    #+begin_src MIPS
    lw   $ra, 0($fp)
    move $t0, $fp
    lw   $fp, -4($fp) 
    move $sp, $t0 
    jr   $ra
    #+end_src
[fn:1] Notes from [[https://pages.cs.wisc.edu/~aws/courses/cs536/readings/codegen.html][CS536 Lecture Notes on Codegen]]
