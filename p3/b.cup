/*********************************************************************
 Java CUP specification for a parser for b programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                RECEIVE;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal ExpNode          loc;
non terminal CallExpNode      fncall;

 
/* NOTE: Add precedence and associativity declarations here */
/*
Finall, the assignment operator (=)
Assignment is right associative.
*/
precedence right ASSIGN;
/*
Then the logical or operator (||)
*/
precedence left OR;
/* Then the logical and operator (&&) */
precedence left AND;
/*
Then the relational and equality operators
The relational and equality operators are non-associative:
*/
precedence nonassoc EQUALS, NOTEQUALS, LESSEQ, LESS, GREATEREQ, GREATER;
/* Then addition and subtraction */
precedence left PLUS, MINUS;
/* Then multiplication and division */
precedence left TIMES, DIVIDE;
/* The unary minus and not (!) operators have the highest precedence */
precedence nonassoc MINUS, NOT;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;
varDeclList     ::= varDeclList varDecl
                | /* epsilon */
                ;
varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;
stmt            ::= assignExp SEMICOLON
                | PLUSPLUS loc SEMICOLON
                | MINUSMINUS loc SEMICOLON
                | RECEIVE READ loc SEMICOLON
                | PRINT WRITE exp SEMICOLON
                | IF exp LCURLY varDeclList stmtList RCURLY
                | IF exp LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
                | WHILE exp LCURLY varDeclList stmtList RCURLY
                | REPEAT exp LCURLY varDeclList stmtList RCURLY
                | RETURN exp SEMICOLON
                | RETURN SEMICOLON
                | fncall SEMICOLON
                ;

Exp       ::= loc ASSIGN exp
                ;

exp             ::= assignExp
                | exp PLUS exp
                | exp MINUS exp
                | exp TIMES exp
                | exp DIVIDE exp
                | NOT exp
                | exp AND exp
                | exp OR exp
                | exp EQUALS exp
                | exp NOTEQUALS exp
                | exp LESS exp
                | exp GREATER exp
                | exp LESSEQ exp
                | exp GREATEREQ exp
                | MINUS term
                | term
                ;
term            ::= loc
                {:
                :}
                | INTLITERAL
                {:
                :}
                | STRINGLITERAL
                {:
                :}
                | TRUE
                {:
                :}
                | FALSE
                {:
                :}
                | LPAREN exp RPAREN
                {:
                :}
                | fncall
                {:
                :}
                ;

fncall          ::=  id:i LPAREN RPAREN
                {:
                    RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:al RPAREN  // with args
                {:
                    RESULT = new CallExpNode(i, al);
                :}
                ;

actualList      ::= exp:e
                {:
                    RESULT = new LinkedList<ExpNode>(e);
                :}
                | actialList:al COMMA exp:e
                {:
                    al.addLast(e);
                    RESULT = al;
                :}
                ;

type            ::= INT
                {:
                    RESULT = new IntNode();
                :}
                | BOOL
                {:
                    RESULT = new BoolNode();
                :}
                | VOID
                {:
                    RESULT = new VoidNode();
                :}
                ;

loc             ::= ID:i
                {:
                    RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                |   loc:l DOT id:i
                {:
                    RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {:
                    RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
