/*********************************************************************
 Java CUP specification for a parser for b programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                RECEIVE;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;

//newly added
non terminal LinkedList	      varDeclList;
//done

non terminal VarDeclNode      varDecl;

//newly added
non terminal FnDeclNode fnDecl;
non terminal StructDeclNode structDecl;
non terminal LinkedList structBody;
non terminal FormalsListNode formals;
non terminal LinkedList formalsList;
non terminal FormalDeclNode formalDecl;
non terminal FnBodyNode fnBody;
non terminal LinkedList stmtList;
non terminal StmtNode stmt;
non terminal ExpNode exp; //experssion
non terminal ExpNode term;
non terminal LinkedList actualList;
//done

non terminal AssignNode       assignExp;
non terminal TypeNode         type;
//order differentiate from the b.grammar
non terminal IdNode           id;
non terminal ExpNode          loc;
non terminal CallExpNode      fncall;

 
/* NOTE: Add precedence and associativity declarations here */
/*
Finall, the assignment operator (=)
Assignment is right associative.
*/
precedence right ASSIGN;
/*
Then the logical or operator (||)
*/
precedence left OR;
/* Then the logical and operator (&&) */
precedence left AND;
/*
Then the relational and equality operators
The relational and equality operators are non-associative:
*/
precedence nonassoc EQUALS, NOTEQUALS, LESSEQ, LESS, GREATEREQ, GREATER;
/* Then addition and subtraction */
precedence left PLUS, MINUS;
/* Then multiplication and division */
precedence left TIMES, DIVIDE;
/* The unary minus and not (!) operators have the highest precedence */
precedence nonassoc MINUS, NOT;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;
varDeclList     ::= varDeclList:vl varDecl:v
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
		{:        RESULT = new LinkedList<VarDeclNode>();
		:}
                ;
varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;
fnDecl		::= type:t id:i formals:f fnBody:body
		{: RESULT = new FnDeclNode(t,i,f,body);
		:}
		;
structDecl	::= STRUCT id:i LCURLY structBody:sb RCURLY
		{:
		    RESULT = new StructDeclNode(i,
		                                new DeclListNode(sb));
		:}
		;
structBody	::= structBody:sb varDecl:d
		{:
		    sb.add(d);
		    RESULT = sb;
		:}
		|varDecl:d
		{:
            RESULT = new LinkedList<VarDeclNode>(Arrays.asList(d));
		:}
		;
formals         ::= LPAREN RPAREN
		{:RESULT = new FormalsListNode(new LinkedList());
		:}
                | LPAREN formalsList:f RPAREN
		{:RESULT = new FormalsListNode(f);
		:}
                ;

formalsList     ::= formalDecl:fd
		{:
            LinkedList<FormalDeclNode> L = new LinkedList<FormalDeclNode>();
		    L.add(fd);

		    RESULT = L;
		:}
               | formalDecl:fd COMMA formalsList:ls
                {:ls.addFirst(fd);  //?
		  RESULT = ls;
		:}
		;

formalDecl      ::= type:t id:i        // note: no struct parameters
        {:
            RESULT = new FormalDeclNode(t,i);
		:}
		;

fnBody          ::= LCURLY varDeclList:vd stmtList:sl RCURLY
	        {: RESULT = new FnBodyNode(new DeclListNode(vd),
					   new StmtListNode(sl));
		:}        
		;

stmtList        ::= stmtList:L stmt:s
		{: L.addLast(s);
		   RESULT = L;
		:}
                | /* epsilon */
                {: RESULT = new LinkedList();
		:}
		;

//TODO: more implement here.
stmt            ::= assignExp:a SEMICOLON
		{:
		    RESULT = new AssignStmtNode(a);
		:}
                | PLUSPLUS loc:l SEMICOLON
		{:
		    RESULT = new PreIncStmtNode(l);
		:}
                | MINUSMINUS loc:l SEMICOLON
		{:
		    RESULT = new PreDecStmtNode(l);
		:}
                | RECEIVE READ loc:l SEMICOLON
        {:
            RESULT = new ReceiveStmtNode(l);
		:}
		| PRINT WRITE exp:e SEMICOLON
        {:
            RESULT = new PrintStmtNode(e);
		:}
		| IF exp:e LCURLY varDeclList:v stmtList:s RCURLY
        {:
            RESULT = new IfStmtNode(e,
                                    new DeclListNode(v),
                                    new StmtListNode(s));
		:}
		| IF exp:e LCURLY varDeclList:v1 stmtList:s1 RCURLY ELSE LCURLY
		varDeclList:v2 stmtList:s2 RCURLY
        {:
            RESULT = new IfElseStmtNode(e, new DeclListNode(v1),
                                            new StmtListNode(s1),
                                            new DeclListNode(v2),
                                            new StmtListNode(s2));
		:}
		| WHILE exp:e LCURLY varDeclList:v stmtList:s RCURLY
        {: RESULT = new WhileStmtNode(e,new DeclListNode(v),
                                        new StmtListNode(s));
		:}
		| REPEAT exp:e LCURLY varDeclList:v stmtList:s RCURLY
        {: RESULT = new RepeatStmtNode(e,new DeclListNode(v),
                                          new StmtListNode(s));
		:}
		| RETURN exp:e SEMICOLON
        {:RESULT = new ReturnStmtNode(e);
		:}
		| RETURN SEMICOLON
        {:RESULT = new ReturnStmtNode(null);   // ?
		:}
		| fncall:fn SEMICOLON
        {:RESULT = new CallStmtNode(fn);
		:}
		;

assignExp       ::= loc:l ASSIGN exp:e
		{:RESULT = new AssignNode(l,e);
		:}
                ;

exp             ::= assignExp:e
		{: RESULT = e;
		:}
                | exp:e1 PLUS exp:e2
		{:RESULT = new PlusNode(e1,e2);
		:}
                | exp:e1 MINUS exp:e2
		{:RESULT = new MinusNode(e1,e2);
		:}
                | exp:e1 TIMES exp:e2
                {:RESULT = new TimesNode(e1,e2);
		:}
		| exp:e1 DIVIDE exp:e2
		{:RESULT = new DivideNode(e1,e2);
		:}
                | NOT exp:e1
		{:RESULT = new NotNode(e1);
		:} 		
                | exp:e1 AND exp:e2
               	{:RESULT = new AndNode(e1,e2);
		:}  
		| exp:e1 OR exp:e2
                {:RESULT = new OrNode(e1,e2);
		:} 
		| exp:e1 EQUALS exp:e2
                {:RESULT = new EqualsNode(e1,e2);
		:} 
		| exp:e1 NOTEQUALS exp:e2
                {:RESULT = new NotEqualsNode(e1,e2);
		:} 
		| exp:e1 LESS exp:e2
                {:RESULT = new LessNode(e1,e2);
		:} 
		| exp:e1 GREATER exp:e2
                {:RESULT = new GreaterNode(e1,e2);
		:} 
		| exp:e1 LESSEQ exp:e2
                {:RESULT = new LessEqNode(e1,e2);
		:} 
		| exp:e1 GREATEREQ exp:e2
                {:RESULT = new GreaterEqNode(e1,e2);
		:} 
		| MINUS term:t
                {:RESULT = new UnaryMinusNode(t);
		:}
		| term:t
                {:RESULT = t;	
		:}
		;
term            ::= loc:l
                {:RESULT = l;
                :}
                | INTLITERAL:l
                {:RESULT = new IntLitNode(l.linenum,l.charnum,l.intVal);
                :}
                | STRINGLITERAL:s
                {:RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {:RESULT = new TrueNode(((TokenVal)((Symbol)t).value)
                .linenum, ((TokenVal)((Symbol)t).value).charnum);
                :}
                | FALSE:f
                {:RESULT = new FalseNode(((TokenVal)((Symbol)f).value)
                .linenum, ((TokenVal)((Symbol)f).value).charnum);
                :}
                | LPAREN exp:e RPAREN
                {:RESULT = e;
                :}
                | fncall:f
                {:RESULT = f;
                :}
                ;

fncall          ::=  id:i LPAREN RPAREN
                {:
                    RESULT = new CallExpNode(i);
                :}
                | id:i LPAREN actualList:al RPAREN  // with args
                {:
                    RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;

actualList      ::= exp:e
                {:
                    LinkedList t = new LinkedList<ExpNode>();
                    t.add(e);
                    RESULT = t;
                :}
                | actualList:al COMMA exp:e
                {:
                    al.addLast(e);
                    RESULT = al;
                :}
                ;

type            ::= INT
                {:
                    RESULT = new IntNode();
                :}
                | BOOL
                {:
                    RESULT = new BoolNode();
                :}
                | VOID
                {:
                    RESULT = new VoidNode();
                :}
                ;

loc             ::= ID:i
                {:
                    RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                |   loc:l DOT id:i
                {:
                    RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {:
                    RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
